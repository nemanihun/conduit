{"uid":"1e1b259fe67fd0d6","name":"test_multi_page_listing","fullName":"Tests.Automata teszt.test_conduit.TestConduit#test_multi_page_listing","historyId":"f19b345498462f4ac15a6da340d45291","time":{"start":1681646803322,"stop":1681646804704,"duration":1382},"status":"broken","statusMessage":"selenium.common.exceptions.TimeoutException: Message:","statusTrace":"self = <test_conduit.TestConduit object at 0x7f3883dff160>\n\n    def test_multi_page_listing(self):\n        manipulatepages = model.ManipulatePages()\n    \n        getusers = model.GetUsers()\n    \n        print()\n        print('ATC 06 - Több oldalas lista bejárása')\n        print()\n    \n        # Bejelentkezem az alkalmazásba.\n        getusers.signin(self.browser, 'user1')\n    \n        # Megvárom, amíg megjelenik a \"Log out\" gomb az oldalon.\n        getusers.logout_btn(self.browser)\n    \n        # Végig lépegetek a lista oldalain és kigyűjtöm, melyik oldalon hány cikk van.\n>       page_numbers = manipulatepages.multi_page_list_explore(self.browser)\n\nTests/Automata teszt/test_conduit.py:154: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nTests/Automata teszt/model.py:343: in multi_page_list_explore\n    pages = WebDriverWait(browser, 1).until(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"59d1a5e7a9cdfcab24758fb867e7dfb1\")>\nmethod = <function presence_of_all_elements_located.<locals>._predicate at 0x7f3883eb37f0>\nmessage = ''\n\n    def until(self, method, message: str = \"\"):\n        \"\"\"Calls the method provided with the driver as an argument until the \\\n        return value does not evaluate to ``False``.\n    \n        :param method: callable(WebDriver)\n        :param message: optional message for :exc:`TimeoutException`\n        :returns: the result of the last call to `method`\n        :raises: :exc:`selenium.common.exceptions.TimeoutException` if timeout occurs\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            time.sleep(self._poll)\n            if time.monotonic() > end_time:\n                break\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message:\n\n/opt/hostedtoolcache/Python/3.10.11/x64/lib/python3.10/site-packages/selenium/webdriver/support/wait.py:95: TimeoutException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_xunit_setup_method_fixture_TestConduit","time":{"start":1681646802204,"stop":1681646803321,"duration":1117},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false}],"testStage":{"status":"broken","statusMessage":"selenium.common.exceptions.TimeoutException: Message:","statusTrace":"self = <test_conduit.TestConduit object at 0x7f3883dff160>\n\n    def test_multi_page_listing(self):\n        manipulatepages = model.ManipulatePages()\n    \n        getusers = model.GetUsers()\n    \n        print()\n        print('ATC 06 - Több oldalas lista bejárása')\n        print()\n    \n        # Bejelentkezem az alkalmazásba.\n        getusers.signin(self.browser, 'user1')\n    \n        # Megvárom, amíg megjelenik a \"Log out\" gomb az oldalon.\n        getusers.logout_btn(self.browser)\n    \n        # Végig lépegetek a lista oldalain és kigyűjtöm, melyik oldalon hány cikk van.\n>       page_numbers = manipulatepages.multi_page_list_explore(self.browser)\n\nTests/Automata teszt/test_conduit.py:154: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nTests/Automata teszt/model.py:343: in multi_page_list_explore\n    pages = WebDriverWait(browser, 1).until(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"59d1a5e7a9cdfcab24758fb867e7dfb1\")>\nmethod = <function presence_of_all_elements_located.<locals>._predicate at 0x7f3883eb37f0>\nmessage = ''\n\n    def until(self, method, message: str = \"\"):\n        \"\"\"Calls the method provided with the driver as an argument until the \\\n        return value does not evaluate to ``False``.\n    \n        :param method: callable(WebDriver)\n        :param message: optional message for :exc:`TimeoutException`\n        :returns: the result of the last call to `method`\n        :raises: :exc:`selenium.common.exceptions.TimeoutException` if timeout occurs\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            time.sleep(self._poll)\n            if time.monotonic() > end_time:\n                break\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message:\n\n/opt/hostedtoolcache/Python/3.10.11/x64/lib/python3.10/site-packages/selenium/webdriver/support/wait.py:95: TimeoutException","steps":[],"attachments":[{"uid":"e13531106c4b6d91","name":"stdout","source":"e13531106c4b6d91.txt","type":"text/plain","size":164}],"parameters":[],"stepsCount":0,"attachmentsCount":1,"shouldDisplayMessage":true,"hasContent":true},"afterStages":[{"name":"_xunit_setup_method_fixture_TestConduit::0","time":{"start":1681646804722,"stop":1681646804779,"duration":57},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false}],"labels":[{"name":"parentSuite","value":"Tests.Automata teszt"},{"name":"suite","value":"test_conduit"},{"name":"subSuite","value":"TestConduit"},{"name":"host","value":"fv-az254-795"},{"name":"thread","value":"3032-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"Tests.Automata teszt.test_conduit"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"tags":[]},"source":"1e1b259fe67fd0d6.json","parameterValues":[]}