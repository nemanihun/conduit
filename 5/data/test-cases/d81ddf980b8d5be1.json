{"uid":"d81ddf980b8d5be1","name":"test_signin","fullName":"Tests.Automata teszt.test_conduit.TestConduit#test_signin","historyId":"a3132a100faf3ea2f7f312c8438eaf23","time":{"start":1680723944767,"stop":1680723950039,"duration":5272},"status":"broken","statusMessage":"selenium.common.exceptions.TimeoutException: Message:","statusTrace":"self = <test_conduit.TestConduit object at 0x7f5af80068f0>\n\n    def test_signin(self):\n        getusers = model.GetUsers()\n    \n        required_data = {\n            'test_name': 'TestCase 02 - Bejelentkezés',\n            'expected_result': 'Sikeres bejelentkezés után látszik a \"Log out\" gomb',\n            'actual_result': 'Sikeres bejelentkezés, látszik a \"Log out\" gomb',\n    \n        }\n    \n        testcase2 = model.Testcase(\n            test_name=required_data['test_name'],\n            expected_result=required_data['expected_result'],\n            actual_result=required_data['actual_result'],\n    \n        )\n    \n        testcase2.teszt_nev()\n        testcase2.teszt_start()\n    \n        getusers.signin(self.browser, 'user2')\n    \n>       WebDriverWait(self.browser, 5).until((EC.url_to_be(adatok.Urls.home_url)))\n\nTests/Automata teszt/test_conduit.py:81: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"7b50b8ff5fa99e3ddbd8ca615295f8e2\")>\nmethod = <function url_to_be.<locals>._predicate at 0x7f5af80aaa70>\nmessage = ''\n\n    def until(self, method, message: str = \"\"):\n        \"\"\"Calls the method provided with the driver as an argument until the \\\n        return value does not evaluate to ``False``.\n    \n        :param method: callable(WebDriver)\n        :param message: optional message for :exc:`TimeoutException`\n        :returns: the result of the last call to `method`\n        :raises: :exc:`selenium.common.exceptions.TimeoutException` if timeout occurs\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            time.sleep(self._poll)\n            if time.monotonic() > end_time:\n                break\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message:\n\n/opt/hostedtoolcache/Python/3.10.10/x64/lib/python3.10/site-packages/selenium/webdriver/support/wait.py:95: TimeoutException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_xunit_setup_method_fixture_TestConduit","time":{"start":1680723938592,"stop":1680723944767,"duration":6175},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false}],"testStage":{"status":"broken","statusMessage":"selenium.common.exceptions.TimeoutException: Message:","statusTrace":"self = <test_conduit.TestConduit object at 0x7f5af80068f0>\n\n    def test_signin(self):\n        getusers = model.GetUsers()\n    \n        required_data = {\n            'test_name': 'TestCase 02 - Bejelentkezés',\n            'expected_result': 'Sikeres bejelentkezés után látszik a \"Log out\" gomb',\n            'actual_result': 'Sikeres bejelentkezés, látszik a \"Log out\" gomb',\n    \n        }\n    \n        testcase2 = model.Testcase(\n            test_name=required_data['test_name'],\n            expected_result=required_data['expected_result'],\n            actual_result=required_data['actual_result'],\n    \n        )\n    \n        testcase2.teszt_nev()\n        testcase2.teszt_start()\n    \n        getusers.signin(self.browser, 'user2')\n    \n>       WebDriverWait(self.browser, 5).until((EC.url_to_be(adatok.Urls.home_url)))\n\nTests/Automata teszt/test_conduit.py:81: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"7b50b8ff5fa99e3ddbd8ca615295f8e2\")>\nmethod = <function url_to_be.<locals>._predicate at 0x7f5af80aaa70>\nmessage = ''\n\n    def until(self, method, message: str = \"\"):\n        \"\"\"Calls the method provided with the driver as an argument until the \\\n        return value does not evaluate to ``False``.\n    \n        :param method: callable(WebDriver)\n        :param message: optional message for :exc:`TimeoutException`\n        :returns: the result of the last call to `method`\n        :raises: :exc:`selenium.common.exceptions.TimeoutException` if timeout occurs\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            time.sleep(self._poll)\n            if time.monotonic() > end_time:\n                break\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message:\n\n/opt/hostedtoolcache/Python/3.10.10/x64/lib/python3.10/site-packages/selenium/webdriver/support/wait.py:95: TimeoutException","steps":[],"attachments":[{"uid":"1faefa765dd916dc","name":"stdout","source":"1faefa765dd916dc.txt","type":"text/plain","size":185}],"parameters":[],"stepsCount":0,"attachmentsCount":1,"shouldDisplayMessage":true,"hasContent":true},"afterStages":[{"name":"_xunit_setup_method_fixture_TestConduit::0","time":{"start":1680723950080,"stop":1680723950136,"duration":56},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false}],"labels":[{"name":"parentSuite","value":"Tests.Automata teszt"},{"name":"suite","value":"test_conduit"},{"name":"subSuite","value":"TestConduit"},{"name":"host","value":"fv-az389-890"},{"name":"thread","value":"3157-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"Tests.Automata teszt.test_conduit"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"tags":[]},"source":"d81ddf980b8d5be1.json","parameterValues":[]}