{"uid":"1cc2344784ed1323","name":"test_data_download","fullName":"Tests.Automata teszt.test_conduit.TestConduit#test_data_download","historyId":"fc981a1e49b86e955fd5d4fd5d65649e","time":{"start":1681646105089,"stop":1681646106483,"duration":1394},"status":"broken","statusMessage":"selenium.common.exceptions.TimeoutException: Message:","statusTrace":"self = <test_conduit.TestConduit object at 0x7f502e59ad40>\n\n    def test_data_download(self):\n        manipulatepages = model.ManipulatePages()\n    \n        getusers = model.GetUsers()\n    \n        print()\n        print('ATC 11 - Adatok lementése felületről/Cikkek címének lementése csv-be')\n        print()\n    \n        # Bejelentkezem az alkalmazásba.\n        getusers.signin(self.browser, 'user4')\n    \n        # # Megvárom, amíg megjelenik a \"Log out\" gomb az oldalon.\n        # getusers.logout_btn(self.browser)\n    \n        # Letöltöm a testuser1 felhasználó cikkeinek címét a weboldalról.\n>       article = manipulatepages.article_download(self.browser, 'saved.csv')\n\nTests/Automata teszt/test_conduit.py:330: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nTests/Automata teszt/model.py:438: in article_download\n    user_link = WebDriverWait(browser, 1).until(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"c878612aabedfd2bfc238c1c92fd8a03\")>\nmethod = <function presence_of_all_elements_located.<locals>._predicate at 0x7f502d3f43a0>\nmessage = ''\n\n    def until(self, method, message: str = \"\"):\n        \"\"\"Calls the method provided with the driver as an argument until the \\\n        return value does not evaluate to ``False``.\n    \n        :param method: callable(WebDriver)\n        :param message: optional message for :exc:`TimeoutException`\n        :returns: the result of the last call to `method`\n        :raises: :exc:`selenium.common.exceptions.TimeoutException` if timeout occurs\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            time.sleep(self._poll)\n            if time.monotonic() > end_time:\n                break\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message:\n\n/opt/hostedtoolcache/Python/3.10.11/x64/lib/python3.10/site-packages/selenium/webdriver/support/wait.py:95: TimeoutException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_xunit_setup_method_fixture_TestConduit","time":{"start":1681646103952,"stop":1681646105088,"duration":1136},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false}],"testStage":{"status":"broken","statusMessage":"selenium.common.exceptions.TimeoutException: Message:","statusTrace":"self = <test_conduit.TestConduit object at 0x7f502e59ad40>\n\n    def test_data_download(self):\n        manipulatepages = model.ManipulatePages()\n    \n        getusers = model.GetUsers()\n    \n        print()\n        print('ATC 11 - Adatok lementése felületről/Cikkek címének lementése csv-be')\n        print()\n    \n        # Bejelentkezem az alkalmazásba.\n        getusers.signin(self.browser, 'user4')\n    \n        # # Megvárom, amíg megjelenik a \"Log out\" gomb az oldalon.\n        # getusers.logout_btn(self.browser)\n    \n        # Letöltöm a testuser1 felhasználó cikkeinek címét a weboldalról.\n>       article = manipulatepages.article_download(self.browser, 'saved.csv')\n\nTests/Automata teszt/test_conduit.py:330: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nTests/Automata teszt/model.py:438: in article_download\n    user_link = WebDriverWait(browser, 1).until(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"c878612aabedfd2bfc238c1c92fd8a03\")>\nmethod = <function presence_of_all_elements_located.<locals>._predicate at 0x7f502d3f43a0>\nmessage = ''\n\n    def until(self, method, message: str = \"\"):\n        \"\"\"Calls the method provided with the driver as an argument until the \\\n        return value does not evaluate to ``False``.\n    \n        :param method: callable(WebDriver)\n        :param message: optional message for :exc:`TimeoutException`\n        :returns: the result of the last call to `method`\n        :raises: :exc:`selenium.common.exceptions.TimeoutException` if timeout occurs\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            time.sleep(self._poll)\n            if time.monotonic() > end_time:\n                break\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message:\n\n/opt/hostedtoolcache/Python/3.10.11/x64/lib/python3.10/site-packages/selenium/webdriver/support/wait.py:95: TimeoutException","steps":[],"attachments":[{"uid":"386d267f40c3aa07","name":"stdout","source":"386d267f40c3aa07.txt","type":"text/plain","size":196}],"parameters":[],"stepsCount":0,"attachmentsCount":1,"shouldDisplayMessage":true,"hasContent":true},"afterStages":[{"name":"_xunit_setup_method_fixture_TestConduit::0","time":{"start":1681646106503,"stop":1681646106561,"duration":58},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false}],"labels":[{"name":"parentSuite","value":"Tests.Automata teszt"},{"name":"suite","value":"test_conduit"},{"name":"subSuite","value":"TestConduit"},{"name":"host","value":"fv-az507-455"},{"name":"thread","value":"3116-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"Tests.Automata teszt.test_conduit"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"tags":[]},"source":"1cc2344784ed1323.json","parameterValues":[]}