{"uid":"4042144c977b191e","name":"test_delete_data","fullName":"Tests.Automata teszt.test_conduit.TestConduit#test_delete_data","historyId":"9df2a530d06260b0ab7015527692c25c","time":{"start":1681212494552,"stop":1681212563076,"duration":68524},"status":"broken","statusMessage":"selenium.common.exceptions.TimeoutException: Message:","statusTrace":"self = <test_conduit.TestConduit object at 0x7f5404cba050>\n\n    def test_delete_data(self):\n        manipulatepages = model.ManipulatePages()\n    \n        getusers = model.GetUsers()\n    \n        asserts = asserting.Asserts()\n    \n        required_data = {\n            'test_name': 'ATC 09 - Adat törlése/Cikk törlése',\n            'expected_result': 'A cikk törlése sikeres. A cikk nem jelenik már meg az oldalon.',\n            'actual_result': 'A cikk törlése sikeres. A cikk már nem jelenik meg az oldalon.',\n            'article': 'article2_data'\n        }\n    \n        article = required_data['article']\n    \n        testcase9 = model.Testcase(\n            test_name=required_data['test_name'],\n            expected_result=required_data['expected_result'],\n            actual_result=required_data['actual_result'],\n        )\n    \n        testcase9.teszt_nev()\n    \n        getusers.signin(self.browser, 'user1')\n    \n        WebDriverWait(self.browser, 5).until(EC.presence_of_all_elements_located((By.CLASS_NAME, 'counter')))\n    \n>       manipulatepages.delete_article(self.browser, article)\n\nTests/Automata teszt/test_conduit.py:319: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nTests/Automata teszt/model.py:409: in delete_article\n    self.find_article(browser, article)\nTests/Automata teszt/model.py:252: in find_article\n    pages = WebDriverWait(browser, 5).until(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"978d8228abae851cd665d3e453d7e5f0\")>\nmethod = <function presence_of_all_elements_located.<locals>._predicate at 0x7f5404c4c5e0>\nmessage = ''\n\n    def until(self, method, message: str = \"\"):\n        \"\"\"Calls the method provided with the driver as an argument until the \\\n        return value does not evaluate to ``False``.\n    \n        :param method: callable(WebDriver)\n        :param message: optional message for :exc:`TimeoutException`\n        :returns: the result of the last call to `method`\n        :raises: :exc:`selenium.common.exceptions.TimeoutException` if timeout occurs\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            time.sleep(self._poll)\n            if time.monotonic() > end_time:\n                break\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message:\n\n/opt/hostedtoolcache/Python/3.10.10/x64/lib/python3.10/site-packages/selenium/webdriver/support/wait.py:95: TimeoutException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_xunit_setup_method_fixture_TestConduit","time":{"start":1681212483180,"stop":1681212494550,"duration":11370},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false}],"testStage":{"status":"broken","statusMessage":"selenium.common.exceptions.TimeoutException: Message:","statusTrace":"self = <test_conduit.TestConduit object at 0x7f5404cba050>\n\n    def test_delete_data(self):\n        manipulatepages = model.ManipulatePages()\n    \n        getusers = model.GetUsers()\n    \n        asserts = asserting.Asserts()\n    \n        required_data = {\n            'test_name': 'ATC 09 - Adat törlése/Cikk törlése',\n            'expected_result': 'A cikk törlése sikeres. A cikk nem jelenik már meg az oldalon.',\n            'actual_result': 'A cikk törlése sikeres. A cikk már nem jelenik meg az oldalon.',\n            'article': 'article2_data'\n        }\n    \n        article = required_data['article']\n    \n        testcase9 = model.Testcase(\n            test_name=required_data['test_name'],\n            expected_result=required_data['expected_result'],\n            actual_result=required_data['actual_result'],\n        )\n    \n        testcase9.teszt_nev()\n    \n        getusers.signin(self.browser, 'user1')\n    \n        WebDriverWait(self.browser, 5).until(EC.presence_of_all_elements_located((By.CLASS_NAME, 'counter')))\n    \n>       manipulatepages.delete_article(self.browser, article)\n\nTests/Automata teszt/test_conduit.py:319: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nTests/Automata teszt/model.py:409: in delete_article\n    self.find_article(browser, article)\nTests/Automata teszt/model.py:252: in find_article\n    pages = WebDriverWait(browser, 5).until(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"978d8228abae851cd665d3e453d7e5f0\")>\nmethod = <function presence_of_all_elements_located.<locals>._predicate at 0x7f5404c4c5e0>\nmessage = ''\n\n    def until(self, method, message: str = \"\"):\n        \"\"\"Calls the method provided with the driver as an argument until the \\\n        return value does not evaluate to ``False``.\n    \n        :param method: callable(WebDriver)\n        :param message: optional message for :exc:`TimeoutException`\n        :returns: the result of the last call to `method`\n        :raises: :exc:`selenium.common.exceptions.TimeoutException` if timeout occurs\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            time.sleep(self._poll)\n            if time.monotonic() > end_time:\n                break\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message:\n\n/opt/hostedtoolcache/Python/3.10.10/x64/lib/python3.10/site-packages/selenium/webdriver/support/wait.py:95: TimeoutException","steps":[],"attachments":[{"uid":"3e4bf17f2967ceab","name":"stdout","source":"3e4bf17f2967ceab.txt","type":"text/plain","size":195}],"parameters":[],"stepsCount":0,"attachmentsCount":1,"shouldDisplayMessage":true,"hasContent":true},"afterStages":[{"name":"_xunit_setup_method_fixture_TestConduit::0","time":{"start":1681212563098,"stop":1681212563155,"duration":57},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false}],"labels":[{"name":"parentSuite","value":"Tests.Automata teszt"},{"name":"suite","value":"test_conduit"},{"name":"subSuite","value":"TestConduit"},{"name":"host","value":"fv-az167-97"},{"name":"thread","value":"3053-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"Tests.Automata teszt.test_conduit"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"tags":[]},"source":"4042144c977b191e.json","parameterValues":[]}