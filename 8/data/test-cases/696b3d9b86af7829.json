{"uid":"696b3d9b86af7829","name":"test_modify_data","fullName":"Tests.Automata teszt.test_conduit.TestConduit#test_modify_data","historyId":"d2b956625c11487a0b3f4c96b95af47d","time":{"start":1681212414548,"stop":1681212483093,"duration":68545},"status":"broken","statusMessage":"selenium.common.exceptions.TimeoutException: Message:","statusTrace":"self = <test_conduit.TestConduit object at 0x7f5404cb9ba0>\n\n    def test_modify_data(self):\n        manipulatepages = model.ManipulatePages()\n    \n        getusers = model.GetUsers()\n    \n        asserts = asserting.Asserts()\n    \n        required_data = {\n            'test_name': 'ATC 08 - Adat módosítása/Cikk módosítása',\n            'expected_result': 'A cikk módosítása sikeres. A cikk címe megjelenik az oldalon.',\n            'actual_result': 'Megjelenik a módosított cikk címe. A cikk módosítása sikeres volt.',\n            'article': 'article1_data'\n        }\n    \n        article = required_data['article']\n    \n        testcase8 = model.Testcase(\n            test_name=required_data['test_name'],\n            expected_result=required_data['expected_result'],\n            actual_result=required_data['actual_result'],\n        )\n    \n        testcase8.teszt_nev()\n    \n        getusers.signin(self.browser, 'user1')\n    \n        WebDriverWait(self.browser, 5).until(EC.presence_of_all_elements_located((By.CLASS_NAME, 'counter')))\n    \n>       manipulatepages.modify_article(self.browser, article)\n\nTests/Automata teszt/test_conduit.py:281: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nTests/Automata teszt/model.py:364: in modify_article\n    self.find_article(browser, article)\nTests/Automata teszt/model.py:252: in find_article\n    pages = WebDriverWait(browser, 5).until(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"27b93218309c54bd2b5e2f65ee128b27\")>\nmethod = <function presence_of_all_elements_located.<locals>._predicate at 0x7f5404c1ca60>\nmessage = ''\n\n    def until(self, method, message: str = \"\"):\n        \"\"\"Calls the method provided with the driver as an argument until the \\\n        return value does not evaluate to ``False``.\n    \n        :param method: callable(WebDriver)\n        :param message: optional message for :exc:`TimeoutException`\n        :returns: the result of the last call to `method`\n        :raises: :exc:`selenium.common.exceptions.TimeoutException` if timeout occurs\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            time.sleep(self._poll)\n            if time.monotonic() > end_time:\n                break\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message:\n\n/opt/hostedtoolcache/Python/3.10.10/x64/lib/python3.10/site-packages/selenium/webdriver/support/wait.py:95: TimeoutException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_xunit_setup_method_fixture_TestConduit","time":{"start":1681212403167,"stop":1681212414547,"duration":11380},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false}],"testStage":{"status":"broken","statusMessage":"selenium.common.exceptions.TimeoutException: Message:","statusTrace":"self = <test_conduit.TestConduit object at 0x7f5404cb9ba0>\n\n    def test_modify_data(self):\n        manipulatepages = model.ManipulatePages()\n    \n        getusers = model.GetUsers()\n    \n        asserts = asserting.Asserts()\n    \n        required_data = {\n            'test_name': 'ATC 08 - Adat módosítása/Cikk módosítása',\n            'expected_result': 'A cikk módosítása sikeres. A cikk címe megjelenik az oldalon.',\n            'actual_result': 'Megjelenik a módosított cikk címe. A cikk módosítása sikeres volt.',\n            'article': 'article1_data'\n        }\n    \n        article = required_data['article']\n    \n        testcase8 = model.Testcase(\n            test_name=required_data['test_name'],\n            expected_result=required_data['expected_result'],\n            actual_result=required_data['actual_result'],\n        )\n    \n        testcase8.teszt_nev()\n    \n        getusers.signin(self.browser, 'user1')\n    \n        WebDriverWait(self.browser, 5).until(EC.presence_of_all_elements_located((By.CLASS_NAME, 'counter')))\n    \n>       manipulatepages.modify_article(self.browser, article)\n\nTests/Automata teszt/test_conduit.py:281: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nTests/Automata teszt/model.py:364: in modify_article\n    self.find_article(browser, article)\nTests/Automata teszt/model.py:252: in find_article\n    pages = WebDriverWait(browser, 5).until(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"27b93218309c54bd2b5e2f65ee128b27\")>\nmethod = <function presence_of_all_elements_located.<locals>._predicate at 0x7f5404c1ca60>\nmessage = ''\n\n    def until(self, method, message: str = \"\"):\n        \"\"\"Calls the method provided with the driver as an argument until the \\\n        return value does not evaluate to ``False``.\n    \n        :param method: callable(WebDriver)\n        :param message: optional message for :exc:`TimeoutException`\n        :returns: the result of the last call to `method`\n        :raises: :exc:`selenium.common.exceptions.TimeoutException` if timeout occurs\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            time.sleep(self._poll)\n            if time.monotonic() > end_time:\n                break\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message:\n\n/opt/hostedtoolcache/Python/3.10.10/x64/lib/python3.10/site-packages/selenium/webdriver/support/wait.py:95: TimeoutException","steps":[],"attachments":[{"uid":"b9ac69acc6216816","name":"stdout","source":"b9ac69acc6216816.txt","type":"text/plain","size":207}],"parameters":[],"stepsCount":0,"attachmentsCount":1,"shouldDisplayMessage":true,"hasContent":true},"afterStages":[{"name":"_xunit_setup_method_fixture_TestConduit::0","time":{"start":1681212483119,"stop":1681212483178,"duration":59},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false}],"labels":[{"name":"parentSuite","value":"Tests.Automata teszt"},{"name":"suite","value":"test_conduit"},{"name":"subSuite","value":"TestConduit"},{"name":"host","value":"fv-az167-97"},{"name":"thread","value":"3053-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"Tests.Automata teszt.test_conduit"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"tags":[]},"source":"696b3d9b86af7829.json","parameterValues":[]}