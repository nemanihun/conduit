{"uid":"d2dd2bfe94cf24e0","name":"test_signup","fullName":"Tests.Automata teszt.test_conduit.TestConduit#test_signup","historyId":"81ec2de8fb1458b21c58257b4e3734e6","time":{"start":1681212307934,"stop":1681212311038,"duration":3104},"status":"failed","statusMessage":"AssertionError","statusTrace":"self = <test_conduit.TestConduit object at 0x7f5404cbb4f0>\n\n    def test_signup(self):\n        getusers = model.GetUsers()\n    \n        required_data = {\n            'test_name': 'ATC 01 - Regisztráció',\n            'expected_result': 'Sikeres regisztráció után látszik az \"Ok\" gomb',\n            'actual_result': 'A regisztráció sikeres, látszik az \"Ok\" gomb',\n        }\n    \n        testcase1 = model.Testcase(\n            test_name=required_data['test_name'],\n            expected_result=required_data['expected_result'],\n            actual_result=required_data['actual_result'],\n        )\n    \n        testcase1.teszt_nev()\n    \n        getusers.signup(self.browser, 'user1')\n    \n        asserts = asserting.Asserts()\n    \n        WebDriverWait(self.browser, 5).until(\n            EC.presence_of_element_located((By.CLASS_NAME, 'ion-android-exit')))\n    \n        getusers.logout_btn(self.browser).is_displayed()\n    \n        testcase1.expected_res()\n    \n>       asserts.general_asserts(getusers.signup_ok_btn(self.browser).is_displayed())\n\nTests/Automata teszt/test_conduit.py:55: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <asserts.Asserts object at 0x7f5404d91300>, asserts = False\n\n    def general_asserts(self, asserts):\n>       assert asserts\nE       AssertionError\n\nTests/Automata teszt/asserts.py:12: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_xunit_setup_method_fixture_TestConduit","time":{"start":1681212289524,"stop":1681212307933,"duration":18409},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false}],"testStage":{"status":"failed","statusMessage":"AssertionError","statusTrace":"self = <test_conduit.TestConduit object at 0x7f5404cbb4f0>\n\n    def test_signup(self):\n        getusers = model.GetUsers()\n    \n        required_data = {\n            'test_name': 'ATC 01 - Regisztráció',\n            'expected_result': 'Sikeres regisztráció után látszik az \"Ok\" gomb',\n            'actual_result': 'A regisztráció sikeres, látszik az \"Ok\" gomb',\n        }\n    \n        testcase1 = model.Testcase(\n            test_name=required_data['test_name'],\n            expected_result=required_data['expected_result'],\n            actual_result=required_data['actual_result'],\n        )\n    \n        testcase1.teszt_nev()\n    \n        getusers.signup(self.browser, 'user1')\n    \n        asserts = asserting.Asserts()\n    \n        WebDriverWait(self.browser, 5).until(\n            EC.presence_of_element_located((By.CLASS_NAME, 'ion-android-exit')))\n    \n        getusers.logout_btn(self.browser).is_displayed()\n    \n        testcase1.expected_res()\n    \n>       asserts.general_asserts(getusers.signup_ok_btn(self.browser).is_displayed())\n\nTests/Automata teszt/test_conduit.py:55: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <asserts.Asserts object at 0x7f5404d91300>, asserts = False\n\n    def general_asserts(self, asserts):\n>       assert asserts\nE       AssertionError\n\nTests/Automata teszt/asserts.py:12: AssertionError","steps":[],"attachments":[{"uid":"492c41ae01459cdc","name":"stdout","source":"492c41ae01459cdc.txt","type":"text/plain","size":284},{"uid":"c5488fa502d874f5","name":"stderr","source":"c5488fa502d874f5.txt","type":"text/plain","size":160}],"parameters":[],"stepsCount":0,"attachmentsCount":2,"shouldDisplayMessage":true,"hasContent":true},"afterStages":[{"name":"_xunit_setup_method_fixture_TestConduit::0","time":{"start":1681212311094,"stop":1681212311151,"duration":57},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false}],"labels":[{"name":"parentSuite","value":"Tests.Automata teszt"},{"name":"suite","value":"test_conduit"},{"name":"subSuite","value":"TestConduit"},{"name":"host","value":"fv-az167-97"},{"name":"thread","value":"3053-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"Tests.Automata teszt.test_conduit"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"tags":[]},"source":"d2dd2bfe94cf24e0.json","parameterValues":[]}