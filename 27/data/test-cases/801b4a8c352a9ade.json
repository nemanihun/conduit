{"uid":"801b4a8c352a9ade","name":"test_more_articles_uploads","fullName":"Tests.Automata teszt.test_conduit.TestConduit#test_more_articles_uploads","historyId":"f5bb8eae81f0bbfba83f65ad86575797","time":{"start":1681648444953,"stop":1681648457128,"duration":12175},"status":"broken","statusMessage":"selenium.common.exceptions.TimeoutException: Message:","statusTrace":"self = <test_conduit.TestConduit object at 0x7fa463edabc0>\n\n    def test_more_articles_uploads(self):\n        manipulatepages = model.ManipulatePages()\n    \n        getusers = model.GetUsers()\n    \n        print()\n        print('ATC 10 - Ismételt és sorozatos adatbevitel adatforrásból/Cikkek feltöltése csv-ből')\n        print()\n    \n        # Bejelentkezem az alkalmazásba.\n        getusers.signin(self.browser, 'user1')\n    \n        # Megvárom, amíg megjelenik a \"Log out\" gomb az oldalon.\n        getusers.logout_btn(self.browser)\n    \n        # Feltöltöm a cikkeket.\n>       article = manipulatepages.more_articles_uploads_from_data_source(self.browser, 'hirek.csv')\n\nTests/Automata teszt/test_conduit.py:302: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nTests/Automata teszt/model.py:433: in more_articles_uploads_from_data_source\n    self.article_listing(browser)\nTests/Automata teszt/model.py:300: in article_listing\n    title_list = WebDriverWait(browser, 5).until(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"27448a8b3a669b7c64859b5ddc0ba24d\")>\nmethod = <function presence_of_all_elements_located.<locals>._predicate at 0x7fa462de5900>\nmessage = ''\n\n    def until(self, method, message: str = \"\"):\n        \"\"\"Calls the method provided with the driver as an argument until the \\\n        return value does not evaluate to ``False``.\n    \n        :param method: callable(WebDriver)\n        :param message: optional message for :exc:`TimeoutException`\n        :returns: the result of the last call to `method`\n        :raises: :exc:`selenium.common.exceptions.TimeoutException` if timeout occurs\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            time.sleep(self._poll)\n            if time.monotonic() > end_time:\n                break\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message:\n\n/opt/hostedtoolcache/Python/3.10.11/x64/lib/python3.10/site-packages/selenium/webdriver/support/wait.py:95: TimeoutException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_xunit_setup_method_fixture_TestConduit","time":{"start":1681648443888,"stop":1681648444952,"duration":1064},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false}],"testStage":{"status":"broken","statusMessage":"selenium.common.exceptions.TimeoutException: Message:","statusTrace":"self = <test_conduit.TestConduit object at 0x7fa463edabc0>\n\n    def test_more_articles_uploads(self):\n        manipulatepages = model.ManipulatePages()\n    \n        getusers = model.GetUsers()\n    \n        print()\n        print('ATC 10 - Ismételt és sorozatos adatbevitel adatforrásból/Cikkek feltöltése csv-ből')\n        print()\n    \n        # Bejelentkezem az alkalmazásba.\n        getusers.signin(self.browser, 'user1')\n    \n        # Megvárom, amíg megjelenik a \"Log out\" gomb az oldalon.\n        getusers.logout_btn(self.browser)\n    \n        # Feltöltöm a cikkeket.\n>       article = manipulatepages.more_articles_uploads_from_data_source(self.browser, 'hirek.csv')\n\nTests/Automata teszt/test_conduit.py:302: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nTests/Automata teszt/model.py:433: in more_articles_uploads_from_data_source\n    self.article_listing(browser)\nTests/Automata teszt/model.py:300: in article_listing\n    title_list = WebDriverWait(browser, 5).until(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"27448a8b3a669b7c64859b5ddc0ba24d\")>\nmethod = <function presence_of_all_elements_located.<locals>._predicate at 0x7fa462de5900>\nmessage = ''\n\n    def until(self, method, message: str = \"\"):\n        \"\"\"Calls the method provided with the driver as an argument until the \\\n        return value does not evaluate to ``False``.\n    \n        :param method: callable(WebDriver)\n        :param message: optional message for :exc:`TimeoutException`\n        :returns: the result of the last call to `method`\n        :raises: :exc:`selenium.common.exceptions.TimeoutException` if timeout occurs\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            time.sleep(self._poll)\n            if time.monotonic() > end_time:\n                break\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message:\n\n/opt/hostedtoolcache/Python/3.10.11/x64/lib/python3.10/site-packages/selenium/webdriver/support/wait.py:95: TimeoutException","steps":[],"attachments":[{"uid":"307bd7131c89fca2","name":"stdout","source":"307bd7131c89fca2.txt","type":"text/plain","size":3896}],"parameters":[],"stepsCount":0,"attachmentsCount":1,"shouldDisplayMessage":true,"hasContent":true},"afterStages":[{"name":"_xunit_setup_method_fixture_TestConduit::0","time":{"start":1681648457146,"stop":1681648457202,"duration":56},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false}],"labels":[{"name":"parentSuite","value":"Tests.Automata teszt"},{"name":"suite","value":"test_conduit"},{"name":"subSuite","value":"TestConduit"},{"name":"host","value":"fv-az402-399"},{"name":"thread","value":"3074-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"Tests.Automata teszt.test_conduit"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"tags":[]},"source":"801b4a8c352a9ade.json","parameterValues":[]}